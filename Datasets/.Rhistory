?mvpnorm
?mvtnorm::mvpnorm
pmvnorm(9,9,9)
mvtnorm::pmvnorm(9,9,9)
sigma<-matrix(c(5,2,2,1),2,2)
mvrnorm(1,mu=c(165,55),sigma=sigma)
sigma<-matrix(c(5,2,2,1),2,2)
mvrnorm(1,mu=c(165,55),sigma=sigma)
mvrnorm(1,mu=c(165,55),sigma=Sigma)
mvrnorm(1,mu=c(165,55),Sigma=Sigma)
Sigma<-matrix(c(5,2,2,1),2,2)
mvrnorm(1,mu=c(165,55),Sigma=Sigma)
mvrnorm(1,mu=c(165,55),Sigma=Sigma)
mvrnorm(1,mu=c(165,55),Sigma=Sigma)
mvtnorm::pmvnorm(mvrnorm(1,mu=c(165,55),Sigma=Sigma))
mvtnorm::pmvnorm(mvrnorm(1,mu=c(165,55),Sigma=Sigma))
mvrnorm(1,mu=c(165,55),Sigma=Sigma)
mvrnorm(1,mu=c(165,55,100),Sigma=Sigma)
mvrnorm(1,mu=c(165,55),Sigma=diag(3))
mvrnorm(1,mu=c(165,55,100),Sigma=diag(3))
mvrnorm(1,mu=c(165,55),Sigma=diag(2))
mvrnorm(1,mu=c(165,55,100),Sigma=diag(3))
mvrnorm(1,mu=c(165,55),Sigma=diag(2))
mvrnorm(1,mu=c(165,55,100),Sigma=diag(3))
X=c(17,  15,  20,  20,  32,  28,  12,  26,  25,  25,  35,  24)
sign.test(X)
library(MASS)
library(BSDA)
sign.test(X,mu=20)
SIGN.test(X,mu=20)
SIGN.test(X,s=20)
SIGN.test(X,median=20)
SIGN.test(X,med=20)
SIGN.test(X,md=20)
SIGN.test(X,md=20,method="greater than")
SIGN.test(X,md=20,method="greater.than")
SIGN.test(X,md=20,alternative="greater.than")
SIGN.test(X,md=20,alternative="greater")
?SIGN.test
read.csv("C:/Users/user/Downloads/data_belly_fat.csv")
read.csv("C:/Users/user/Downloads/data_belly_fat.csv")
belly_fat<-read.csv("C:/Users/user/Downloads/data_belly_fat.csv")
bead(belly_fat)
head(belly_fat)
ts(belly_fat,start=1992,end=2004,frequency = 2)
belly_tsts(belly_fat,start=1992,end=2004,frequency = 2)
belly_ts<-ts(belly_fat,start=1992,end=2004,frequency = 2)
head(belly_ts)
head(belly_fat)
head(belly_ts)
belly_ts<-ts(belly_fat,start=1992,end=2004,frequency = 2)
head(belly_fat)
head(belly_ts)
belly_ts<-ts(belly_fat,start=1992,end=2004,frequency = 1)
head(belly_ts)
belly_ts
belly_ts<-ts(belly_fat,start=1992,end=2004,frequency = 365)
head(belly_ts)
belly_ts
head(belly_ts)
belly_ts<-ts(belly_fat,start=1992,end=2004,frequency =1)
head(belly_ts)
belly_ts<-ts(belly_fat,start=1992,end=2004,frequency =0)
belly_ts<-ts(belly_fat,start=1992,end=2004,frequency =0.1)
belly_ts<-ts(belly_fat,start=1992,end=2004,frequency =1)
head(belly_ts)
head(belly_fat)
which(belly_fat==SD)
which(belly_fat=="SD")
belly_fat=belly_fat[-which(belly_fat=="SD")]
head(belly_fat)
head(belly_fat)
belly_fat=belly_fat[,-which(belly_fat=="SD")]
head(belly_fat)
belly_fat[,-which(belly_fat=="SD")]
belly_fat[,-which(belly_fat=="*.1")]
belly_fat[,-which(belly_fat=="%.1")]
belly_fat[,-where(belly_fat=="SD")]
which(belly_fat=="SD")
for (i in length(belly_fat)){
if (i>=3){
belly_fat=belly_fat[,-i]
i=i+2
}
}
head(belly_fat)
for (i in length(belly_fat)){
if (i>=3){
belly_fat<-belly_fat[,-i]
i=i+2
}
return(belly_fat)
}
head(belly_fat)
which(belly_fat[,]=="SD")
belly_fat<-belly_fat[,-c(3,5,7,9,11,13,15,17)]
head(belly_fat)
belly_fat<-belly_fat[,-"X55.59"]
belly_fat<-belly_fat[-length(belly_fat)]
head(belly_fat)
belly_ts<-ts(belly_fat,start=1992,end=2004,frequency =1)
head(belly_ts)
library(forecast)
auto.arima(belly_ts)
auto.arima(belly_ts$X19.24)
auto.arima(belly_ts"$X19.24")
belly_ts<-ts(belly_fat$X19.24,start=1992,end=2004,frequency =1)
head(belly_ts)
library(forecast)
auto.arima(belly_ts)
plot(belly_ts)
head(belly_ts)
auto.arima(belly_ts)
decompose(belly_ts)
belly_ts<-ts(belly_fat$X19.24,start=1992,end=2004,frequency =2)
head(belly_ts)
library(forecast)
plot(belly_ts)
decompose(belly_ts)
belly_ts<-ts(belly_fat$X19.24,start=1992,end=2004,frequency =3)
head(belly_ts)
library(forecast)
plot(belly_ts)
decompose(belly_ts)
belly_ts<-ts(belly_fat$X19.24,start=1992,end=2004,frequency =365)
head(belly_ts)
library(forecast)
plot(belly_ts)
decompose(belly_ts)
auto.arima(belly_ts)
head(belly_ts)
belly_ts<-belly_ts[-1]
library(forecast)
plot(belly_ts)
auto.arima(belly_ts)
plot(belly_ts)
belly_ts<-ts(belly_fat$X19.24,start=1992,end=2004,frequency =365)
head(belly_ts)
belly_ts<-belly_ts[-1]
library(forecast)
plot(belly_ts)
auto.arima(belly_ts)
read.csv("C:\Users\user\Downloads\data_belly_fat.csv")
read.csv("C:/Users/user/Downloads/data_belly_fat.csv")
data<-read.csv("C:/Users/user/Downloads/data_belly_fat.csv")
data<-data[,-(>=16)]
data<-data[,-(data[>=16])]
data<-data[,-(data[,>=16])]
data<-data[,-c(which(data[>=16]))]
which(data[,>=16])
which(data==NULL)
which(data=NULL)
which(NULL)
which(data[,NULL])
which(data[,==NULL])
which(data==NULL)
which(data=="-")
data<-data[which(data=="-")]
data<-data[,which(data=="-")]
data<-data[data=="-"]
data
data<-data[-data=="-"]
data<-data[-c(data=="-")]
data
data<-data[,-c(data=="-")]
data
data<-read.csv("C:/Users/user/Downloads/data_belly_fat.csv")
which(data=="-")
data<-data[,-c(data=="-")]
data
data
data<-data[,-c(data=="-")]
data
data<-data[,-c(data=="-")]
data
data<-read.csv("C:/Users/user/Downloads/data_belly_fat.csv")
data<-data[,-c("X55.59", "X55.59.1", "X60.64", "X60.64.1", "X65..", "X65...1)"]
data<-data[,-c("X55.59", "X55.59.1", "X60.64", "X60.64.1", "X65..", "X65...1)"]
data<-data[,-c("X55.59", "X55.59.1", "X60.64", "X60.64.1", "X65..", "X65...1")]
data<-data[,-("X55.59", "X55.59.1", "X60.64", "X60.64.1", "X65..", "X65...1")]
data<-data[-("X55.59", "X55.59.1", "X60.64", "X60.64.1", "X65..", "X65...1")]
data<-data[,-c("X55.59", "X55.59.1", "X60.64", "X60.64.1", "X65..", "X65...1")]
data<-read.csv("C:/Users/user/Downloads/data_belly_fat.csv")
which(data=="-")
data<-data[,-c("X55.59", "X55.59.1", "X60.64", "X60.64.1", "X65..", "X65...1")]
head(data)
model<-lm(X50.54~X19.24+X25.29+X30.34+X35.39+X40.44+X45.49,data=data)
model<-lm(X50.54[2>=]~X19.24+X25.29+X30.34+X35.39+X40.44+X45.49,data=data)
model<-lm(X50.54[2:P6]~X19.24+X25.29+X30.34+X35.39+X40.44+X45.49,data=data)
model<-lm(X50.54[2:6]~X19.24+X25.29+X30.34+X35.39+X40.44+X45.49,data=data)
data2<-data[-1]
model<-lm(X50.54~X19.24+X25.29+X30.34+X35.39+X40.44+X45.49,data=data2)
data2
data2<-data[-1]
data2
data2<-data[-c(1)]
data2
data2<-data[-c(1)]
data2
data2<-data[-c(1)]
data2
data<-read.csv("C:/Users/user/Downloads/data_belly_fat.csv")
data2<-data[-c(1)]
data2
data2<-data[-1,]
data2
model<-lm(X50.54~X19.24+X25.29+X30.34+X35.39+X40.44+X45.49,data=data2)
summary(model)
model<-lm(X50.54~X19.24,data=data2)
summary(model)
model<-lm(X50.54~X19.24,data=data2)
summary(model)
test<-t.test(X50.54~X19.24,data=data2)
test<-t.test(data2[X19.24],data2[X30.24])
test<-t.test(data2[,X19.24],data2[,X30.24])
test<-t.test(data2[,"X19.24"],data2[,"X30.24"])
test<-t.test(data2[,"X19.24"],data2[,"X30.34"])
test<-t.test(data2[,"X19.24"],data2[,"X30.34"],paired = T)
data2
class(data2)
type(data2)
head(data2)
class(data2)
test<-t.test(data2[,"X19.24"],data2[,"X30.34"],paired = T)
test<-t.test(data2[,2],data2[,6],paired = T)
?t.test
library(BDSA)
library(BSDA)
wilcox.test(data2[,2],data2[,6])
wilcox.test(as.numeric(data2[,2]),data2[,6])
data2<-as.numeric(data[-1,])
head(data2)
class(data2)
library(BSDA)
wilcox.test(data2[,2],data2[,6])
data2<-as.numeric(data[-1,])
head(data2)
class(data2)
library(BSDA)
wilcox.test(data2[,2],data2[,6])
data2<-as.numeric(data[-1,])
data2<-as.numeric(data[-1,-1])
head(data2)
class(data2)
data2<-as.numeric(data[-1,-1])
data2<-as.numeric(data[-1,-1])
data2<-as.numeric(data[-1,-0])
head(data2)
class(data2)
library(BSDA)
wilcox.test(data2[,2],data2[,6])
head(data2)
data2<-as.numeric(data[-1,-0])
head(data2)
data2<-as.numeric(data[-1,-1])
data2<-data[-1,-1]
head(data2)
class(data2)
wilcox.test(as.numeric(data2[,2]),as.numeric(data2[,6])
wilcox.test(as.numeric(data2[,2]),as.numeric(data2[,6]))
wilcox.test(as.numeric(data2[,2]),as.numeric(data2[,6]))
head(data2)
wilcox.test(as.numeric(data2[,2],as.numberic(data2[,"50.54"])))
wilcox.test(as.numeric(data2[,2],as.numeric(data2[,"50.54"])))
wilcox.test(as.numeric(data2[,2],as.numeric(data2[,c("50.54")])))
wilcox.test(as.numeric(data2[,2],as.numeric(data2[,"X50.54"])))
?wilcox.test
wilcox.test(as.numeric(data2[,2]),as.numeric(data2[,6]),paired=T)
wilcox.test(as.numeric(data2[,2],as.numeric(data2[,"X50.54"])),paired=T)
wilcox.test(as.numeric(data2[,2]),as.numeric(data2[,6]),paired=T)
wilcox.test(as.numeric(data2[,2],as.numeric(data2[,"X50.54"])),paired=T)
wilcox.test(as.numeric(data2[,2],as.numeric(data2[,"X50.54"])),paired=T)
wilcox.test(as.numeric(data2[,2],as.numeric(data2[,"X50.54"]),paired=T)
wilcox.test(as.numeric(data2[,2]),as.numeric(data2[,"X50.54"]),paired=T)
wilcox.test(as.numeric(data2[,2]),as.numeric(data2[,"X50.54"]),paired=T)
wilcox.test(as.numeric(data2[,2]),as.numeric(data2[,6]),paired=T)
wilcox.test(as.numeric(data2[,2]),as.numeric(data2[,"X50.54"]),paired=T)
# mtcars 데이터 불러오기
library(ggplot2)
data(mtcars)
# 로지스틱 회귀분석
model <- glm(vs ~ mpg, data = mtcars, family = binomial)
# 회귀선 그리기
ggplot(mtcars, aes(x = mpg, y = vs)) +
geom_point() +  # 산점도 추가
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE) +
labs(x = "연비", y = "vs (0: V-shaped, 1: straight)")
plot(mtcars$mpg, mtcars$vs)
abline(model)
lines(model)
plot(mtcars$mpg, mtcars$vs)
lines(model)
lines(c(0:50),predict(model,c(0:50))
lines(c(0:50),predict(model,c(0:50)))
lines(c(0:50),predict(model,c(0:50)))
plot(mtcars$mpg, mtcars$vs)
lines(c(0:50),predict(model,c(0:50)))
X<-data.frame(c(0:50))
plot(mtcars$mpg, mtcars$vs)
lines(X,predict(model,X))
lines(X,predict(model,X))
plot(mtcars$mpg, mtcars$vs, xlab = "연비", ylab = "vs (0: V-shaped, 1: straight)")
abline(model, col = "red")
X<-data.frame(c(0:50))
lines(X, predict.glm(model, X))
# 회귀선 그리기
plot(mtcars$mpg, mtcars$vs, xlab = "연비",
ylab = "vs (0: V-shaped, 1: straight)")
lines(X, predict.glm(model, X))
# 회귀선 그리기
plot(mtcars$mpg, mtcars$vs, xlab = "연비",
ylab = "vs (0: V-shaped, 1: straight)")
lines(X, predict(model, X))
par(new=T)
lines(X, predict(model, X))
# 회귀선 그리기
plot(mtcars$mpg, mtcars$vs, xlab = "연비",
ylab = "vs (0: V-shaped, 1: straight)")
par(new=T)
lines(X, predict(model, X))
par(new=T)
lines(X, predict(model, X))
X<-data.frame(c(0:50))
# 회귀선 그리기
plot(mtcars$mpg, mtcars$vs, xlab = "연비",
ylab = "vs (0: V-shaped, 1: straight)")
par(new=T)
lines(X, predict(model, X))
X<-data.frame(c(0:233))
# 회귀선 그리기
plot(mtcars$mpg, mtcars$vs, xlab = "연비",
ylab = "vs (0: V-shaped, 1: straight)")
par(new=T)
lines(X, predict(model, X))
pred<-predict(model, X)
X<-data.frame(c(0:50))
pred<-predict(model, X)
mpg
coef(model)
pred<-1/(1+exp(-( -8.8330726+0.4304135*X)))
# 회귀선 그리기
plot(mtcars$mpg, mtcars$vs, xlab = "연비",
ylab = "vs (0: V-shaped, 1: straight)")
par(new=T)
lines(X, pred)
lines(X, pred)
pred<-1/(1+exp(-(-8.8330726+0.4304135*X)))
pred
# 회귀선 그리기
plot(mtcars$mpg, mtcars$vs, xlab = "연비",
ylab = "vs (0: V-shaped, 1: straight)")
lines(X, pred)
lines(c(X,pred)
lines(c(X,pred))
lines(c(X,pred))
# 회귀선 그리기
plot(mtcars$mpg, mtcars$vs, xlab = "연비",
ylab = "vs (0: V-shaped, 1: straight)")
lines(c(X,pred))
lines(X,pred)
class(pred)
class(X)
class(pred,X
class(pred,X)
class(pred,X)
type(X)
types(X)
dtype(X)
(X)
lines(X,pred)
?lines
X<-c(0:50)
pred<-1/(1+exp(-(-8.8330726+0.4304135*X)))
# 회귀선 그리기
plot(mtcars$mpg, mtcars$vs, xlab = "연비",
ylab = "vs (0: V-shaped, 1: straight)")
lines(X,pred)
# 회귀선 그리기
ggplot(mtcars, aes(x = mpg, y = vs)) +
geom_point() +  # 산점도 추가
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE) +
labs(x = "연비", y = "vs (0: V-shaped, 1: straight)")
lines(X,pred, col = "blue")
# 회귀선 그리기
plot(mtcars$mpg, mtcars$vs, xlab = "연비",
ylab = "vs (0: V-shaped, 1: straight)")
lines(X,pred, col = "blue")
# 회귀선 그리기
plot(mtcars$mpg, mtcars$vs, xlab = "연비",
ylab = "vs (0: V-shaped, 1: straight)", type = "n")
# 회귀선 그리기
plot(mtcars$mpg, mtcars$vs, xlab = "연비",
ylab = "vs (0: V-shaped, 1: straight)", type = "d")
# 회귀선 그리기
plot(mtcars$mpg, mtcars$vs, xlab = "연비",
ylab = "vs (0: V-shaped, 1: straight)", type = "c")
lines(X,pred, col = "blue")
# 회귀선 그리기
plot(mtcars$mpg, mtcars$vs, xlab = "연비",
ylab = "vs (0: V-shaped, 1: straight)", type = "t")
?plot
# 회귀선 그리기
plot(mtcars$mpg, mtcars$vs, xlab = "연비",
ylab = "vs (0: V-shaped, 1: straight)", pch = 16)
lines(X,pred, col = "blue")
mtcars$vs
# 회귀선 그리기
plot(mtcars$mpg, mtcars$vs[which(mtcars$vs==1)], xlab = "연비",
ylab = "vs (0: V-shaped, 1: straight)", pch = 16)
# 회귀선 그리기
plot(mtcars$mpg, mtcars$vs, xlab = "연비",
ylab = "vs (0: V-shaped, 1: straight)", pch = 16)
lines(X,pred, col = "blue")
# 회귀선 그리기
ggplot(mtcars, aes(x = mpg, y = vs)) +
geom_point() +  # 산점도 추가
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE) +
labs(x = "연비", y = "vs (0: V-shaped, 1: straight)")
pred<-1/(1+exp(-(model$coefficients[1]+model$coefficients[2]*X)))
# 회귀선 그리기
plot(mtcars$mpg, mtcars$vs, xlab = "연비",
ylab = "vs (0: V-shaped, 1: straight)", pch = 16)
lines(X,pred, col = "blue")
reticulate::repl_python()
response = requests.get(‘https://…’)
soup = BeautifulSoup(response.content, ‘html.parser’)
table = soup.find(‘table’, { ‘class’: ‘table_develop3’ })
data = [ ]
for tr in table.find_all(‘tr’):
tds = list(tr.find_all(‘td))
for td in tds:
if td.find(‘a’):
point = td.find(‘a’).text
temperature = tds[5].text
humidity = tds[9].text
data.append([point, temperature, humidity])
…
df = pd.read_csv(‘weather.csv’, index_col=‘point’,
encoding=‘euc-kr’)
City_df = df.loc[[‘서울’, ‘인천’, ‘대전’, ‘대구’, ‘광주’,
‘부산’, ‘울산’]]
ax = city_df.plot(kind=‘bar’, title=‘날씨’, figsize=(12,4),
legend=fontsize=12)
response = requests.get(‘https://www.weather.go.kr/w/obs-climate/land/city-obs.do’)
response = requests.get(‘https://www.weather.go.kr/w/obs-climate/land/city-obs.do’)
response = requests.get(‘https://www.weather.go.kr/w/obs-climate/land/city-obs.do’)
response = requests.get("https://www.weather.go.kr/w/obs-climate/land/city-obs.do"")
response = requests.get("https://www.weather.go.kr/w/obs-climate/land/city-obs.do")
!pip install BeautifulSoup
response = requests.get("https://www.weather.go.kr/w/obs-climate/land/city-obs.do")
import BeautifulSoup
reticulate::repl_python()
import sklearn
!pip install scikit-learn
import sklearn
!pip install scikit-learn
!pip install optuna
!pip install statsmodels
!pip install pandas
!pip install scikit-learn
!pip install optuna
!pip install statsmodels
!pip install pandas
import sklearn
sklearn.__package__
sklearn.setup_module()
from sklearm.tree import DecisionTreeClassifier
from sklearn.tree import DecisionTreeClassifier
DecisionTreeClassifier
DTC<-DecisionTreeClassifier
DTC=DecisionTreeClassifier
mcars
cars
import scipy as sc
sc.test.
sc.test
from scipy.test import hotelling
from scipy.tests import hotelling
from scipy.test import hotelling
from scipy.test import ttest
!pip install scipy
-m pip install --upgrade pip
!m pip install --upgrade pip
C:\Users\user\AppData\Local\Programs\Python\Python310\python.exe -m pip install --upgrade pip
reticulate::repl_python()
C:/Users/user/AppData/Local/Programs/Python/Python310/python.exe -m pip install --upgrade pip
!pip install scipy
from scipy.stats import hotelling
from scipy.stats import ttest
from scipy.stats import ttest_ind
ttest_ind([1,2,3,4],[1,1,4,4])
ttest_ind([1,2,3,444],[1,1,4,4])
## Comparing variances
load("tulips.RData")
## Comparing variances
load("Datasets/tulips.RData")
setwd("C:/Users/user/OneDrive/바탕 화면/leaRning/Datasets")
## Comparing variances
load("tulips.RData")
var.test(GardenA,GardenB,conf.level=0.99)
## Tests for multiple sample variances
# Choose between the Bartlett test and Fligner-Killeen test
refs<-read.table("Datasets/refuge.txt",header=T)
setwd("C:/Users/user/OneDrive/바탕 화면/leaRning/Datasets")
## Tests for multiple sample variances
# Choose between the Bartlett test and Fligner-Killeen test
refs<-read.table("refuge.txt",header=T)
names(refs)
tapply(refs$B,refs$T,var)
which(refs$T==9)
bartlett.test(refs$B[-31],refs$T[-31])
fligner.test(refs$B[-31],refs$T[-31])
