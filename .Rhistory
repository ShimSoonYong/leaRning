bake(new_data = train.data)
test.data2 <- flights.recipe |>
bake(new_data = test.data)
sapply(train.data2, glimpse)
train.data2 |>
glimpse()
test.data2 |>
glimpse()
train.data2
flights.recipe
#### recipe! ####
flights.recipe <-
recipe(arr.delay ~ .,
data = train.data) |>
update_role(
flight,
time_hour,
new_role = "ID"
) |>
step_mutate(my.flight = flight + 2) |>
step_dummy(all_nominal_predictors()) |>
prep() # End of recipe
train.data2 <- flights.recipe |>
bake(new_data = train.data)
test.data2 <- flights.recipe |>
bake(new_data = test.data)
train.data2 |>
glimpse()
test.data2 |>
glimpse()
#### recipe! ####
flights.recipe <-
recipe(arr.delay ~ .,
data = train.data) |>
update_role(
flight,
time_hour,
new_role = "ID"
) |>
step_date(date,
features = c("dow", "month")) |>
# step_dummy(all_nominal_predictors()) |>
# step_zv(all_predictors()) |>
prep() # End of recipe
train.data2 <- flights.recipe |>
bake(new_data = train.data)
test.data2 <- flights.recipe |>
bake(new_data = test.data)
train.data2 |>
glimpse()
test.data2 |>
glimpse()
#### recipe! ####
flights.recipe <-
recipe(arr.delay ~ .,
data = train.data) |>
update_role(
flight,
time_hour,
new_role = "ID"
) |>
step_date(date,
features = c("dow", "month")) |>
step_holiday(date,
holidays = timeDate::listHolidays("US"),
keep_original_cols = FALSE) |>
step_dummy(all_nominal_predictors()) |>
step_zv(all_predictors()) |>
prep() # End of recipe
train.data2 <- flights.recipe |>
bake(new_data = train.data)
test.data2 <- flights.recipe |>
bake(new_data = test.data)
train.data2 |>
glimpse()
test.data2 |>
glimpse()
library(timeDate)
flights.recipe <-
recipe(arr.delay ~ .,
data = train.data) |>
update_role(
flight,
time_hour,
new_role = "ID"
) |>
step_date(date,
features = c("dow", "month")) |>
step_holiday(date,
holidays = listHolidays("US"),
keep_original_cols = FALSE) |>
# step_dummy(all_nominal_predictors()) |>
# step_zv(all_predictors()) |>
prep() # End of recipe
train.data2 <- flights.recipe |>
bake(new_data = train.data)
test.data2 <- flights.recipe |>
bake(new_data = test.data)
train.data2 |>
glimpse()
test.data2 |>
glimpse()
flights.recipe <-
recipe(arr.delay ~ .,
data = train.data) |>
update_role(
flight,
time_hour,
new_role = "ID"
) |>
step_date(date,
features = c("dow", "month")) |>
step_holiday(date,
holidays = listHolidays("US"),
keep_original_cols = FALSE) |>
step_dummy(all_nominal_predictors()) |>
step_zv(all_predictors()) |>
prep() # End of recipe
train.data2 <- flights.recipe |>
bake(new_data = train.data)
test.data2 <- flights.recipe |>
bake(new_data = test.data)
train.data2 |> dim()
flights.recipe |> juice()
flights.recipe |> juice() |> skim()
#### Modeling ####
linear.model <-
logistic_reg() |>
set_engine("glm")
linear.model
flight.workflow <-
workflow() |>
add_model(linear.model) |>
add_recipe(flights.recipe)
flights.recipe <-
recipe(arr.delay ~ .,
data = train.data) |>
update_role(
flight,
time_hour,
new_role = "ID"
) |>
step_date(date,
features = c("dow", "month")) |>
step_holiday(date,
holidays = listHolidays("US"),
keep_original_cols = FALSE) |>
step_dummy(all_nominal_predictors()) |>
step_zv(all_predictors()) |>
prep() # End of recipe
flight.workflow <-
workflow() |>
add_model(linear.model) |>
add_recipe(flights.recipe)
flights.recipe <-
recipe(arr.delay ~ .,
data = train.data) |>
update_role(
flight,
time_hour,
new_role = "ID"
) |>
step_date(date,
features = c("dow", "month")) |>
step_holiday(date,
holidays = listHolidays("US"),
keep_original_cols = FALSE) |>
step_dummy(all_nominal_predictors()) |>
step_zv(all_predictors()) |>
prep() # End of recipe
train.data2 <- flights.recipe |>
bake(new_data = train.data)
test.data2 <- flights.recipe |>
bake(new_data = test.data)
train.data2 |>
glimpse()
test.data2 |>
glimpse()
train.data2 |> dim()
#### Modeling ####
linear.model <-
logistic_reg() |>
set_engine("glm")
flight.workflow <-
workflow() |>
add_model(linear.model) |>
add_recipe(flights.recipe)
flights.recipe <-
recipe(arr.delay ~ .) |>
update_role(
flight,
time_hour,
new_role = "ID"
) |>
step_date(date,
features = c("dow", "month")) |>
step_holiday(date,
holidays = listHolidays("US"),
keep_original_cols = FALSE) |>
step_dummy(all_nominal_predictors()) |>
step_zv(all_predictors()) |>
prep() # End of recipe
flights.recipe <-
recipe(arr.delay ~ .,
train.data) |>
update_role(
flight,
time_hour,
new_role = "ID"
) |>
step_date(date,
features = c("dow", "month")) |>
step_holiday(date,
holidays = listHolidays("US"),
keep_original_cols = FALSE) |>
step_dummy(all_nominal_predictors()) |>
step_zv(all_predictors()) |>
prep() # End of recipe
#### Modeling ####
linear.model <-
logistic_reg() |>
set_engine("glm")
flight.workflow <-
workflow() |>
add_model(linear.model) |>
add_recipe(flights.recipe)
train.data2 <- flights.recipe |>
juice()
test.data2 <- flights.recipe |>
bake(new_data = test.data)
flights.recipe <-
recipe(arr.delay ~ .,
data = train.data) |>
update_role(
flight,
time_hour,
new_role = "ID"
) |>
step_date(date,
features = c("dow", "month")) |>
step_holiday(date,
holidays = listHolidays("US"),
keep_original_cols = FALSE) |>
step_dummy(all_nominal_predictors()) |>
step_zv(all_predictors()) |>
prep() # End of recipe
library(tidymodels)
tidymodels_prefer()
library(nycflights13)
library(skimr)
### Data preparation ###
set.seed(123)
flights |> skim()
flights |> glimpse()
flight.data <-
flights |>
mutate(
arr.delay = ifelse(arr_delay >= 30,
"late",
"on.time"),
arr.delay = factor(arr.delay),
date = as_date(time_hour)
) |>
inner_join(weather,
by = c('origin',
"time_hour")) |>
select(dep_time, flight, origin, dest,
air_time, distance, carrier,
date, arr.delay, time_hour) |>
drop_na() |>
mutate_if(is.character, as.factor)
### Descriptive statistic ###
flight.data |>
count(arr.delay) |>
mutate(prop = n/sum(n))
flight.data |>
skim(dest, carrier)
flight.data |> skim()
### Inital split ###
set.seed(2022)
data.split <- flight.data |>
initial_split(prop = 3/4)
train.data <- data.split |>
training()
test.data <- data.split |>
testing()
train.data |> glimpse()
test.data |> dim()
#### recipe! ####
library(lubridate)
library(timeDate)
library(tidymodels)
flights.recipe <-
recipe(arr.delay ~ .,
data = train.data) |>
update_role(
flight,
time_hour,
new_role = "ID"
) |>
step_date(date,
features = c("dow", "month")) |>
step_holiday(date,
holidays = listHolidays("US"),
keep_original_cols = FALSE) |>
step_dummy(all_nominal_predictors()) |>
step_zv(all_predictors()) |>
prep() # End of recipe
train.data2 <- flights.recipe |>
juice()
test.data2 <- flights.recipe |>
bake(new_data = test.data)
train.data2 |>
glimpse()
test.data2 |>
glimpse()
train.data2 |> dim()
#### Modeling ####
linear.model <-
logistic_reg() |>
set_engine("glm")
flight.workflow <-
workflow() |>
add_model(linear.model) |>
add_recipe(flights.recipe)
result
result <- flights.fit |>
predict(test_data)
result
flight.workflow <-
workflow() |>
add_model(linear.model) |>
update_recipe(flights.recipe)
flight.workflow <-
workflow() |>
add_recipe(flights.recipe) |>
add_model(linear.model)
flights.recipe <-
recipe(arr.delay ~ .,
data = train.data) |>
update_role(
flight,
time_hour,
new_role = "ID"
) |>
step_date(date,
features = c("dow", "month")) |>
step_holiday(date,
holidays = listHolidays("US"),
keep_original_cols = FALSE) |>
step_dummy(all_nominal_predictors()) |>
step_zv(all_predictors()) |>
train.data2 <- flights.recipe |>
juice()
flights.recipe <-
recipe(arr.delay ~ .,
data = train.data) |>
update_role(
flight,
time_hour,
new_role = "ID"
) |>
step_date(date,
features = c("dow", "month")) |>
step_holiday(date,
holidays = listHolidays("US"),
keep_original_cols = FALSE) |>
step_dummy(all_nominal_predictors()) |>
step_zv(all_predictors())
train.data2 <- flights.recipe |>
juice()
#### Modeling ####
linear.model <-
logistic_reg() |>
set_engine("glm")
flights.fit <-
flights.workflow |>
fit(data = train.data2)
flight.workflow <-
workflow() |>
add_model(linear.model) |>
add_recipe(flights.recipe)
flights.fit <-
flights.workflow |>
fit(data = train.data2)
flights.workflow <-
workflow() |>
add_model(linear.model) |>
add_recipe(flights.recipe)
flights.workflow
flights.fit <-
flights.workflow |>
fit(data = train.data2)
flights.fit <-
flights.workflow |>
fit(data = train.data)
flights.fit <-
flights.workflow |>
fit(data = train.data)
flights.fit |>
extract_fit_parsnip() |>
tidy()
result <- flights.fit |>
predict(test_data)
result <- flights.fit |>
predict(test.data)
result
flights.aug <-
flights.fit |>
augment(test.data)
flights.aug |>
select(arr.delay,
time_hour,
flight,
.pred_class,
.pred_on_time)
flights.aug |>
select(arr.delay,
time_hour,
flight,
.pred_class,
.pred_on.time)
flights.aug |>
select(arr.delay,
time_hour,
flight,
.pred_class,
.pred_on.time)
flights.aug |>
select(arr.delay,
time_hour,
flight,
.pred_class,
.pred_on.time)
flights.aug |>
roc_curve(
truth = arr.delay,
.pred_late) |>
autoplot()
gc()
library(spatstat) runif(100) -\> xcoord runif(100) -\> ycoord ppp(x = xcoord, y = ycoord, window = square(r=1)) summary(ran_pts)
library(spatstat)
install.packages("spatstat")
library(spatstat)
runif(100) -> xcoord
runif(100) -> ycoord
ppp(x = xcoord, y = ycoord, window = square(r=1))
summary(ran_pts)
library(spatstat)
runif(100) -> xcoord
runif(100) -> ycoord
ppp(x = xcoord, y = ycoord, window = square(r=1)) -> ran_pts
summary(ran_pts)
library(spatstat)
runif(100) -> xcoord
runif(100) -> ycoord
ppp(x = xcoord, y = ycoord, window = square(r=1)) -> ran_pts
summary(ran_pts)
plot(ran_pts,cols=hue_pal()(3)[1],main="",pch= 20)
library(scales)
plot(ran_pts,cols=hue_pal()(3)[1],main="",pch= 20)
library(scales)
plot(ran_pts,cols=hue_pal()(3)[1],main="",pch= 20)
install.packages(c("candisc", "heplots", "ragg", "RcppArmadillo", "stringi", "tinytex"))
library(scales)
plot(ran_pts,cols=hue_pal()(3)[1],main="",pch= 20)
library(spatstat)
runif(100) -> xcoord
runif(100) -> ycoord
ppp(x = xcoord, y = ycoord, window = square(r=1)) -> ran_pts
summary(ran_pts)
library(spatstat)
runif(100) -> xcoord
runif(100) -> ycoord
ppp(x = xcoord, y = ycoord, window = square(r=1)) -> ran_pts
summary(ran_pts)
library(scales)
plot(ran_pts,cols=hue_pal()(3)[1],main="",pch= 20)
library(scales)
plot(ran_pts,cols=hue_pal()(3)[1],main="",pch= 20)
summary(ponderosa)
summary(ponderosa)
quadrat.test(ponderosa, nx = 3,
ny =3)->pond_quad
plot(ponderosa, main = "", cols = hue_pal()(1), pch = 20)
plot(pond_quad, add = TRUE)
library(scales)
plot(ran_pts,cols=hue_pal()(3)[1],main="",pch= 20)
quadrat.test(ponderosa, nx = 3,
ny =3)->pond_quad
plot(ponderosa, main = "", cols = hue_pal()(1), pch = 20)
plot(pond_quad, add = TRUE)
pond_quad
library(spatstat)
runif(100) -> xcoord
runif(100) -> ycoord
ppp(x = xcoord, y = ycoord, window = square(r=1)) -> ran_pts
summary(ran_pts)
library(scales)
plot(ran_pts,cols=hue_pal()(3)[1],main="",pch= 20)
summary(ponderosa)
quadrat.test(ponderosa, nx = 3,
ny =3)->pond_quad
plot(ponderosa, main = "", cols = hue_pal()(1), pch = 20)
plot(pond_quad, add = TRUE)
pond_quad
cdf.test(ponderosa, covariate="x", test = "ks")
cdf.test(ponderosa, covariate="x", test = "ks")
cdf.test(ponderosa, covariate="x", test = "ks")
cdf.test(ponderosa, covariate="x", test = "ks")
cdf.test(ponderosa, covariate="x", test = "ks")
cdf.test(ponderosa, covariate = "y", test = "ks")
