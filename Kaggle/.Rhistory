plot(lda.result, type = "both")
lda.pred <- predict(lda.result, AIDS)
lda.table <- table(AIDS$infected, lda.pred$class)
library(DescTools)
Desc(lda.table, digits = 2)
library(klaR)
AIDS |>
partimat(infected ~ ., data = _, method = "lda")
AIDS |>
lda(infected ~ . , data = _) -> lda.result
plot(lda.result, type = "both")
lda.pred <- predict(lda.result, AIDS)
lda.table <- table(AIDS$infected, lda.pred$class)
library(DescTools)
Desc(lda.table, digits = 2)
library(klaR)
AIDS |>
partimat(infected ~ ., data = _, method = "lda")
AIDS |>
lda(infected ~ . , data = _) -> lda.result
plot(lda.result, type = "both")
lda.pred <- predict(lda.result, AIDS)
lda.table <- table(AIDS$infected, lda.pred$class)
library(DescTools)
Desc(lda.table, digits = 2)
library(klaR)
AIDS |>
partimat(infected ~ ., data = _, method = "lda")
lda.table
AIDS |>
lda(infected ~ . , data = _) -> lda.result
plot(lda.result, type = "both")
lda.pred <- predict(lda.result, AIDS)
lda.table <- table(AIDS$infected, lda.pred$class)
library(DescTools)
Desc(lda.table, digits = 2)
library(klaR)
AIDS |>
partimat(infected ~ ., data = _, method = "lda")
glm(infected ~ ., family = binomial(link = "logit"), data = AIDS) -> logit.model
logit.model |> summary()
logit.model |> predict(newdata = AIDS |> select(-infected), type = "response") -> logit.pred
cat("Predicted infection rate: ")
mean(logit.pred >= 0.5)
cat("\nTrue infection rate: ")
mean(AIDS$infected != 0)
logit.table <- table(AIDS$infected, logit.pred$class)
glm(infected ~ ., family = binomial(link = "logit"), data = AIDS) -> logit.model
logit.model |> summary()
logit.model |> predict(newdata = AIDS |> select(-infected), type = "response") -> logit.pred
cat("Predicted infection rate: ")
mean(logit.pred >= 0.5)
cat("\nTrue infection rate: ")
mean(AIDS$infected != 0)
logit.table <- table(AIDS$infected, logit.pred$class)
glm(infected ~ ., family = binomial(link = "logit"), data = AIDS) -> logit.model
logit.model |> summary()
logit.model |> predict(newdata = AIDS |> select(-infected), type = "response") -> logit.pred
cat("Predicted infection rate: ")
mean(logit.pred >= 0.5)
cat("\nTrue infection rate: ")
mean(AIDS$infected != 0)
logit.table <- table(AIDS$infected, logit.pred >= 0.5)
library(DescTools)
Desc(lda.table, digits = 2)
glm(infected ~ ., family = binomial(link = "logit"), data = AIDS) -> logit.model
logit.model |> summary()
logit.model |> predict(newdata = AIDS |> select(-infected), type = "response") -> logit.pred
cat("Predicted infection rate: ")
mean(logit.pred >= 0.5)
cat("\nTrue infection rate: ")
mean(AIDS$infected != 0)
logit.table <- table(AIDS$infected, logit.pred >= 0.5)
library(DescTools)
Desc(logit.table, digits = 2)
glm(infected ~ ., family = binomial(link = "logit"), data = AIDS) -> logit.model
logit.model |> summary()
logit.model |> predict(newdata = AIDS |> select(-infected), type = "response") -> logit.pred
cat("Predicted infection rate: ")
mean(logit.pred >= 0.5)
cat("\nTrue infection rate: ")
mean(AIDS$infected != 0)
logit.table <- table(AIDS$infected, as.numeric(logit.pred >= 0.5))
library(DescTools)
Desc(logit.table, digits = 2)
glm(infected ~ ., family = binomial(link = "logit"), data = AIDS) -> logit.model
logit.model |> summary()
logit.model |> predict(newdata = AIDS |> select(-infected), type = "response") -> logit.pred
cat("Predicted infection rate: ")
mean(logit.pred >= 0.5)
cat("\nTrue infection rate: ")
mean(AIDS$infected != 0)
table(AIDS$infected, as.numeric(logit.pred >= 0.5)) -> logit.table
library(DescTools)
Desc(logit.table, digits = 2)
AIDS |>
lda(infected ~ . , data = _) -> lda.result
plot(lda.result, type = "both")
lda.pred <- predict(lda.result, AIDS)
lda.table <- table(AIDS$infected, lda.pred$class)
library(DescTools)
Desc(lda.table, digits = 2)
lda.result
library(biotools)
boxM(num.var, ADIS$infected) -> AIDS.M
boxM(num.var, ADIS$infected) -> AIDS.M
rm(biotools)
boxM(num.var, ADIS$infected) -> AIDS.M
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidymodels)
library(skimr)
library(GGally)
library(psych)
library(MASS)
library(factoextra)
tidymodels_prefer()
read_csv("C:/Users/user/OneDrive/바탕 화면/leaRning/Kaggle/data/AIDS_Classification.csv") -> AIDS
AIDS %>% skim
# 필요 패키지
library(Hotelling)
library(biotools)
# 가설검정 모델에 적합한 전처리
AIDS %>% mutate_at(vars(symptom,
infected,
homo,
hemo,
gender,
offtrt,
oprior,
race,
str2,
strat,
z30,
drugs,
karnof), as.factor) -> AIDS
AIDS %>% select(-c(symptom,
infected,
homo,
hemo,
gender,
offtrt,
oprior,
race,
str2,
strat,
z30,
drugs,
karnof)) -> num.vars
AIDS %>% filter(infected == 0) %>% select(-c(symptom,
infected,
homo,
hemo,
gender,
offtrt,
oprior,
race,
str2,
strat,
z30,
drugs,
karnof)) -> Not.infect
AIDS %>% filter(infected == 1) %>% select(-c(symptom,
infected,
homo,
hemo,
gender,
offtrt,
oprior,
race,
str2,
strat,
z30,
drugs,
karnof)) -> infect
boxM(num.vars, group = AIDS$infected)
# 가설검정
cat("Hotelling's T squared test for diffrence between Mean Vectors\n")
hotelling.test(x = Not.infect, y = infect,  var.equal = FALSE) -> T.square
T.square
attach(AIDS)
manova(cbind(wtkg, preanti, age, cd40, cd420, cd80, cd820, time) ~
symptom + infected + homo + hemo + gender + offtrt + oprior + race + str2 + strat + z30 + drugs + karnof) %>% summary()
detach(AIDS)
AIDS %>% select(wtkg, preanti, age, cd40, cd420, cd80, cd820, time) %>%
ggpairs(aes(color = AIDS$drugs, alpha = 0.2), title = "정맥 주사 약물 사용 여부에 따른 변수 구분", legend = 1,
upper = list(continuous = "box_no_facet", combo = "box_no_facet", discrete = "count", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na ="na"),
) + theme(legend.position = "bottom")
AIDS %>% select(wtkg, preanti, age, cd40, cd420, cd80, cd820, time) %>%
ggpairs(aes(color = AIDS$z30, alpha = 0.2), title = "지돌부딘 사용 여부에 따른 변수 구분", legend = 1,
upper = list(continuous = "box_no_facet", combo = "box_no_facet", discrete = "count", na = "na"),
lower = list(continuous = "points", combo = "facethist", discrete = "facetbar", na = "na")
)+ theme(legend.position = "bottom")
AIDS %>% ggpairs(title = "모든 변수")
cat("Bartlett's test for sphericity\n")
AIDS %>% select(wtkg, preanti, age, cd40, cd420, cd80, cd820, time) %>%
cortest.bartlett()
AIDS %>% select(wtkg, preanti, age, cd40, cd420, cd80, cd820, time) %>%
ggcorr(label = TRUE, label_round = 3) + scale_fill_gradient(low = "blue", high = "red")
for (i in 1:8){
AIDS %>% select(wtkg, preanti, age, cd40, cd420, cd80, cd820, time) %>%
principal(nfactors = i, rotate = "varimax") -> temp
print(temp)
fa.diagram(temp, simple = FALSE, cut = 0.7, digit = 3)
}
prcomp(num.vars, scale. = TRUE) -> pca.result
scree(num.vars)
fviz_pca_var(pca.result, axes = c(1, 2), choice = "var", col.var = "cos2", gradient.cols = c("#00AFCC", "#E7B828", "#FD4E97"), repel = TRUE)
fviz_contrib(pca.result, axes = c(1, 2), choice = "var")
fviz_pca_biplot(pca.result, col.ind = "grey", geom.ind = "point", choice = "var",
col.var = "cos2", gradient.cols = c("red", "green", "blue"), repel = TRUE)
```
prcomp(num.vars, scale. = TRUE) -> pca.result
scree(num.vars)
fviz_pca_var(pca.result, axes = c(1, 2), choice = "var", col.var = "cos2", gradient.cols = c("#00AFCC", "#E7B828", "#FD4E97"), repel = TRUE)
fviz_contrib(pca.result, axes = c(1, 2), choice = "var")
fviz_pca_biplot(pca.result, col.ind = "grey", geom.ind = "point", choice = "var",
col.var = "cos2", gradient.cols = c("red", "green", "blue"), repel = TRUE)
glm(infected ~ ., family = binomial(link = "logit"), data = AIDS) -> logit.model
logit.model |> summary()
logit.model |> predict(newdata = AIDS |> select(-infected), type = "response") -> logit.pred
cat("Predicted infection rate: ")
mean(logit.pred >= 0.5)
cat("\nTrue infection rate: ")
mean(AIDS$infected != 0)
table(AIDS$infected, as.numeric(logit.pred >= 0.5)) -> logit.table
library(DescTools)
Desc(logit.table, digits = 2)
AIDS |>
lda(infected ~ . , data = _) -> lda.result
plot(lda.result, type = "both")
lda.pred <- predict(lda.result, AIDS)
lda.table <- table(AIDS$infected, lda.pred$class)
library(DescTools)
Desc(lda.table, digits = 2)
lda.result
boxM(num.var, ADIS$infected) -> AIDS.M
boxM(num.var, ADIS$infected) -> AIDS.M
boxM(num.vars, ADIS$infected) -> AIDS.M
boxM(num.vars, AIDS$infected) -> AIDS.M
AIDS.M
AIDS |>
qda(infected ~ ., data = _) -> qda.result
boxM(num.vars, AIDS$infected) -> AIDS.M
AIDS.M
AIDS |>
qda(infected ~ ., data = _) -> qda.result
cat("Bartlett's test for sphericity\n")
AIDS |> select(wtkg, preanti, age, cd40, cd420, cd80, cd820, time) |>
cortest.bartlett()
AIDS |> select(wtkg, preanti, age, cd40, cd420, cd80, cd820, time) |>
ggcorr(label = TRUE, label_round = 3) + scale_fill_gradient(low = "blue", high = "red")
AIDS |>
lda(infected ~ . , data = _) -> lda.result
plot(lda.result, type = "both")
lda.pred <- predict(lda.result, AIDS)
cat("Predicted infection rate: ")
mean(lda.pred >= 0.5)
AIDS |>
lda(infected ~ . , data = _) -> lda.result
plot(lda.result, type = "both")
lda.pred <- predict(lda.result, AIDS)
cat("Predicted infection rate: ")
mean(lda.pred$class >= 0.5)
cat("\nTrue infection rate: ")
mean(AIDS$infected != 0)
lda.table <- table(AIDS$infected, lda.pred$class)
library(DescTools)
Desc(lda.table, digits = 2)
lda.result
AIDS |>
lda(infected ~ . , data = _) -> lda.result
plot(lda.result, type = "both")
lda.pred <- predict(lda.result, AIDS)
cat("Predicted infection rate: ")
mean(lda.pred$class != 0)
cat("\nTrue infection rate: ")
mean(AIDS$infected != 0)
lda.table <- table(AIDS$infected, lda.pred$class)
library(DescTools)
Desc(lda.table, digits = 2)
lda.result
AIDS |>
qda(infected ~ ., data = _) -> qda.result
AIDS |>
qda(infected ~ ., data = _) -> qda.result
AIDS |>
qda(infected ~ ., data = _) -> qda.result
AIDS |>
qda(infected ~ ., data = _) -> qda.result
nzv <- nearZeroVar(AIDS, saveMetrics = TRUE)
library(caret)
nzv <- nearZeroVar(AIDS, saveMetrics = TRUE)
AIDS_filtered <- AIDS[, !nzv$nzv]
# Apply PCA to reduce dimensionality (optional step if needed)
pca <- prcomp(AIDS_filtered[, -which(names(AIDS_filtered) == "infected")], center = TRUE, scale. = TRUE)
library(caret)
nearZeroVar(AIDS, saveMetrics = TRUE) -> nzv
AIDS[, !nzv$nzv] -> AIDS_filtered
# Apply PCA to reduce dimensionality (optional step if needed)
prcomp(num.vars, center = TRUE, scale. = TRUE) -> pca
data.frame(pca$x) -> AIDS_pca
AIDS$infected -> AIDS_pca$infected
# Perform QDA
AIDS_pca |>
qda(infected ~ ., data = _) -> qda.result
# Predict and create the confusion matrix
predict(qda.result, AIDS_pca) -> qda.pred
table(AIDS_pca$infected, qda.pred$class) -> qda.table
# Display the results
qda.table
Desc(qda.table, digits = 2)
# Visualize with partimat
library(klaR)
AIDS_pca |>
partimat(infected ~ ., data = _, method = "qda")
library(caret)
nearZeroVar(AIDS, saveMetrics = TRUE) -> nzv
AIDS[, !nzv$nzv] -> AIDS_filtered
# Apply PCA to reduce dimensionality (optional step if needed)
prcomp(num.vars, center = TRUE, scale. = TRUE) -> pca
data.frame(pca$x) -> AIDS_pca
AIDS$infected -> AIDS_pca$infected
# Perform QDA
AIDS_pca |>
qda(infected ~ ., data = _) -> qda.result
qda.result
# Predict and create the confusion matrix
predict(qda.result, AIDS_pca) -> qda.pred
table(AIDS_pca$infected, qda.pred$class) -> qda.table
# Display the results
qda.table
Desc(qda.table, digits = 2)
# Visualize with partimat
library(klaR)
par(mar = c(5, 5, 5, 5))
AIDS_pca |>
partimat(infected ~ ., data = _, method = "qda")
library(caret)
nearZeroVar(AIDS, saveMetrics = TRUE) -> nzv
AIDS[, !nzv$nzv] -> AIDS_filtered
# Apply PCA to reduce dimensionality (optional step if needed)
prcomp(num.vars, center = TRUE, scale. = TRUE) -> pca
data.frame(pca$x) -> AIDS_pca
AIDS$infected -> AIDS_pca$infected
# Perform QDA
AIDS_pca |>
qda(infected ~ ., data = _) -> qda.result
qda.result
# Predict and create the confusion matrix
predict(qda.result, AIDS_pca) -> qda.pred
table(AIDS_pca$infected, qda.pred$class) -> qda.table
# Display the results
qda.table
Desc(qda.table, digits = 2)
# Visualize with partimat
library(klaR)
par(mar = c(10, 10, 10, 10))
AIDS_pca |>
partimat(infected ~ ., data = _, method = "qda")
library(caret)
nearZeroVar(AIDS, saveMetrics = TRUE) -> nzv
AIDS[, !nzv$nzv] -> AIDS_filtered
# Apply PCA to reduce dimensionality (optional step if needed)
prcomp(num.vars, center = TRUE, scale. = TRUE) -> pca
data.frame(pca$x) -> AIDS_pca
AIDS$infected -> AIDS_pca$infected
# Perform QDA
AIDS_pca |>
qda(infected ~ ., data = _) -> qda.result
qda.result
# Predict and create the confusion matrix
predict(qda.result, AIDS_pca) -> qda.pred
table(AIDS_pca$infected, qda.pred$class) -> qda.table
# Display the results
qda.table
Desc(qda.table, digits = 2)
# Visualize with partimat
library(klaR)
par(mar = c(100, 100, 100, 100))
AIDS_pca |>
partimat(infected ~ ., data = _, method = "qda")
library(caret)
nearZeroVar(AIDS, saveMetrics = TRUE) -> nzv
AIDS[, !nzv$nzv] -> AIDS_filtered
# Apply PCA to reduce dimensionality (optional step if needed)
prcomp(num.vars, center = TRUE, scale. = TRUE) -> pca
data.frame(pca$x) -> AIDS_pca
AIDS$infected -> AIDS_pca$infected
# Perform QDA
AIDS_pca |>
qda(infected ~ ., data = _) -> qda.result
qda.result
# Predict and create the confusion matrix
predict(qda.result, AIDS_pca) -> qda.pred
table(AIDS_pca$infected, qda.pred$class) -> qda.table
# Display the results
qda.table
Desc(qda.table, digits = 2)
# Visualize with partimat
library(klaR)
par(mar = c(1, 1, 1, 1))
AIDS_pca |>
partimat(infected ~ ., data = _, method = "qda")
library(caret)
nearZeroVar(AIDS, saveMetrics = TRUE) -> nzv
AIDS[, !nzv$nzv] -> AIDS_filtered
# Apply PCA to reduce dimensionality (optional step if needed)
prcomp(num.vars, center = TRUE, scale. = TRUE) -> pca
data.frame(pca$x) -> AIDS_pca
AIDS$infected -> AIDS_pca$infected
# Perform QDA
AIDS_pca |>
qda(infected ~ ., data = _) -> qda.result
qda.result
# Predict and create the confusion matrix
predict(qda.result, AIDS_pca) -> qda.pred
table(AIDS_pca$infected, qda.pred$class) -> qda.table
# Display the results
qda.table
Desc(qda.table, digits = 2)
# Visualize with partimat
library(klaR)
# Save plot to a file
png("partimat_plot.png", width = 800, height = 600)
AIDS_pca |>
partimat(infected ~ ., data = _, method = "qda")
dev.off()
# Save plot to a file
png("partimat_plot.png", width = 800, height = 600)
AIDS_pca |>
partimat(infected ~ ., data = _, method = "qda")
dev.off()
library(caret)
nearZeroVar(AIDS, saveMetrics = TRUE) -> nzv
AIDS[, !nzv$nzv] -> AIDS_filtered
# Apply PCA to reduce dimensionality (optional step if needed)
prcomp(num.vars, center = TRUE, scale. = TRUE) -> pca
data.frame(pca$x) -> AIDS_pca
AIDS$infected -> AIDS_pca$infected
# Perform QDA
AIDS_pca |>
qda(infected ~ ., data = _) -> qda.result
qda.result
# Predict and create the confusion matrix
predict(qda.result, AIDS_pca) -> qda.pred
table(AIDS_pca$infected, qda.pred$class) -> qda.table
# Display the results
qda.table
Desc(qda.table, digits = 2)
# # Visualize with partimat
# library(klaR)
# # Save plot to a file
# png("partimat_plot.png", width = 800, height = 600)
# AIDS_pca |>
#   partimat(infected ~ ., data = _, method = "qda")
# dev.off()
library(klaR)
Reset margins to default values
library(klaR)
# Reset margins to default values
par(mar = c(5.1, 4.1, 4.1, 2.1))
# Save plot to a file
png("partimat_plot.png", width = 800, height = 600)
AIDS_pca |>
partimat(infected ~ ., data = _, method = "qda")
dev.off()
library(klaR)
# Reset margins to default values
par(mar = c(5.1, 4.1, 4.1, 2.1))
# Save plot to a file
png("partimat_plot.png", width = 800, height = 600)
AIDS_pca |>
partimat(infected ~ ., data = _, method = "qda")
dev.off()
library(klaR)
# Reset margins to default values
par(mar = c(5.1, 4.1, 4.1, 2.1))
# Save plot to a file
png("partimat_plot.png", width = 800, height = 600)
AIDS_pca |>
partimat(infected ~ ., data = _, method = "qda")
library(caret)
nearZeroVar(AIDS, saveMetrics = TRUE) -> nzv
AIDS[, !nzv$nzv] -> AIDS_filtered
# Apply PCA to reduce dimensionality (optional step if needed)
prcomp(num.vars, center = TRUE, scale. = TRUE) -> pca
data.frame(pca$x) -> AIDS_pca
AIDS$infected -> AIDS_pca$infected
# Perform QDA
AIDS_pca |>
qda(infected ~ ., data = _) -> qda.result
qda.result
# Predict and create the confusion matrix
predict(qda.result, AIDS_pca) -> qda.pred
table(AIDS_pca$infected, qda.pred$class) -> qda.table
# Display the results
qda.table
Desc(qda.table, digits = 2)
AIDS |>
lda(infected ~ . , data = _) -> lda.result
lda.result
plot(lda.result, type = "both")
lda.pred <- predict(lda.result, AIDS)
cat("Predicted infection rate: ")
mean(lda.pred$class != 0)
cat("\nTrue infection rate: ")
mean(AIDS$infected != 0)
lda.table <- table(AIDS$infected, lda.pred$class)
library(DescTools)
Desc(lda.table, digits = 2)
